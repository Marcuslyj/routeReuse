import { Component, OnInit } from '@angular/core';import { SimpleReuseStrategy } from './common/SimpleReuseStrategy';import { ActivatedRoute, Router, NavigationEnd } from '@angular/router';import { Title } from '@angular/platform-browser';import 'rxjs/add/operator/filter';import 'rxjs/add/operator/map';import 'rxjs/add/operator/mergeMap';@Component({  selector: 'app-root',  templateUrl: './app.component.html',  styleUrls: ['./app.component.css'],  providers: [SimpleReuseStrategy]})export class AppComponent implements OnInit {  title = 'app';  //路由列表  menuList: Array<{ title: string, module: string, power: string, isSelect: boolean }> = [];  constructor(    private router: Router,    private activatedRoute: ActivatedRoute,    private titleService: Title  ) {    this.getMenuList();    //路由事件    this.router.events.filter(event => event instanceof NavigationEnd)      .map(() => this.activatedRoute)  // 将filter处理后的Observable再次处理      .map(route => {        while (route.firstChild) route = route.firstChild;//遍历路由表以便获取到每一个页面对应的路由信息        return route;      })      .filter(route => route.outlet === 'primary')      .mergeMap(route => route.data) //获取我们在路由表中为每个路由传入的data信息      .subscribe((event) => {        //路由data的标题        let title = event['title'];        SimpleReuseStrategy.handlers;        this.menuList.forEach(p => p.isSelect = false);        var menu = { title: title, module: event["module"], power: event["power"], isSelect: true };        this.titleService.setTitle(title);        let exitMenu = this.menuList.find(info => info.title == title);        if (exitMenu) {//如果存在不添加，当前表示选中          this.menuList.forEach(p => p.isSelect = p.title == title);          return;        }        this.menuList.push(menu);      });  }  ngOnInit() {  }  getMenuList(): void {    // let menu = { title: "page1", module: "page1", power: "", isSelect: true };    // this.menuList.push(menu);  }  //关闭选项标签  closeCurrent(isSelect: boolean) {    //当前关闭的是第几个路由    let index = this.menuList.findIndex(p => p.isSelect == true);    let currentTab = this.menuList.find(p => p.isSelect == true);    //如果只有一个不可以关闭    if (this.menuList.length == 1) return;    this.menuList = this.menuList.filter(p => p.isSelect == false);    //删除复用    let module = currentTab.module;    SimpleReuseStrategy.deleteRouteSnapshot(module);    //if (!isSelect) return;    //显示上一个选中    let menu = this.menuList[index - 1];    if (!menu) {//如果上一个没有下一个选中      menu = this.menuList[index];    }    //console.log(menu);    //console.log(this.menuList);    this.menuList.forEach(p => p.isSelect = p.module == menu.module);    //显示当前路由信息    this.router.navigate(['/' + menu.module]);  }  //关闭选项标签,用于关闭每个小选项卡  closeUrl(module: string, isSelect: boolean) {    //当前关闭的是第几个路由    let index = this.menuList.findIndex(p => p.module == module);    //如果只有一个不可以关闭    if (this.menuList.length == 1) return;    this.menuList = this.menuList.filter(p => p.module != module);    //删除复用    SimpleReuseStrategy.deleteRouteSnapshot(module)    if (!isSelect) return;    //显示上一个选中    let menu = this.menuList[index - 1];    if (!menu) {//如果上一个没有下一个选中      menu = this.menuList[index + 1];    }    // console.log(menu);    // console.log(this.menuList);    this.menuList.forEach(p => p.isSelect = p.module == menu.module);    //显示当前路由信息    this.router.navigate(['/' + menu.module]);  }  closeCloseOther(isSelect: boolean) {    let currentTab = this.menuList.filter(p => p.isSelect == true);    let otherTab = this.menuList.filter(p => p.isSelect == false);    this.menuList = currentTab;    if (this.menuList.length == 1) return;    for (var i = 0; i < otherTab.length; i++) {      SimpleReuseStrategy.deleteRouteSnapshot(otherTab[i].module);    }    this.router.navigate(['/' + currentTab[0].module]);  }  closeCloseAll() {    if (this.menuList.length == 1) return;    for (var i = 1; i < this.menuList.length; i++) {      SimpleReuseStrategy.deleteRouteSnapshot(this.menuList[i].module);    }    let tempList = this.menuList[0];    this.menuList.splice(0, this.menuList.length);    this.menuList.push(tempList);    this.router.navigate(['/' + this.menuList[0].module]);  }  tabReload() {    //window.location.reload();    let currentTab = this.menuList.find(p => p.isSelect == true);    //router.renavigate()    this.router.navigate(['/' + currentTab.module]);  }}
