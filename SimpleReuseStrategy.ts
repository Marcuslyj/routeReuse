import { RouteReuseStrategy, DefaultUrlSerializer, ActivatedRouteSnapshot, DetachedRouteHandle } from '@angular/router'; export class SimpleReuseStrategy implements RouteReuseStrategy {     public static handlers: { [key: string]: DetachedRouteHandle } = {}    //用一个临时变量记录待删除的路由    private static waitDelete: string     /** 表示对所有路由允许复用 如果你有路由不想利用可以在这加一些业务逻辑判断 */    public shouldDetach(route: ActivatedRouteSnapshot): boolean {        return true;    }     /** 当路由离开时会触发。按path作为key存储路由快照&组件当前实例对象 */    public store(route: ActivatedRouteSnapshot, handle: DetachedRouteHandle): void {        if (SimpleReuseStrategy.waitDelete && SimpleReuseStrategy.waitDelete == route.routeConfig.path) {            //如果待删除是当前路由则不存储快照            SimpleReuseStrategy.waitDelete = null            return;        }        //debugger;        // SimpleReuseStrategy.handlers[this.getRouteUrl(route)] = handle        //route.routeConfig.path        SimpleReuseStrategy.handlers[route.routeConfig.path] = handle    }     /** 若 path 在缓存中有的都认为允许还原路由 */    public shouldAttach(route: ActivatedRouteSnapshot): boolean {        return !!SimpleReuseStrategy.handlers[route.routeConfig.path]    }     /** 从缓存中获取快照，若无则返回nul */    public retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle {        if (!route.routeConfig) {            return null        }        return SimpleReuseStrategy.handlers[route.routeConfig.path]    }     /** 进入路由触发，判断是否同一路由 */    //解决不同的参数也会认为是同一个路由，导致会将之前的路由拿出来复用    public shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean {        return future.routeConfig === curr.routeConfig &&            JSON.stringify(future.params) == JSON.stringify(curr.params);    }    // //解决不同的主路由会存在相同名称的子路由    // private getRouteUrl(route: ActivatedRouteSnapshot) {    //     return route['_routerState'].url;//.replace(/\//g, '_');    // }    public static deleteRouteSnapshot(name: string): void {                if (SimpleReuseStrategy.handlers[name]) {            delete SimpleReuseStrategy.handlers[name];        } else {            SimpleReuseStrategy.waitDelete = name;        }    }}
